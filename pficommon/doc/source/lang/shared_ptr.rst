=====================
pfi::lang::shared_ptr
=====================

概要
====

スマートポインタ。
boostのshared_ptr + スレッドポリシー - deleter 相当の機能を持つ。

（deleterは将来的に実装する予定）

基本的な使い方
==============

shared_ptr<T, TM>
-----------------

T型へのポインタを表す。
TMにはスレッディングモデルを指定する。
デフォルトではpfi::concurrent::threading_model::single_threadが指定される。
pfi::concurrent::threading_mode::multi_threadを指定すると、
マルチスレッドでも正常に動作するようになる。
しかし、共有できるのは、参照先のオブジェクトのみで、
スマートポインタ自体はスレッド間で共有できない。
これはスピードとのトレードオフである。
また、スレッディングモデルの異なるshared_ptr間の変換はできない。

shared_ptrは普通のコピーセマンティクスを持つので、
普通のポインタとして用いることのできるところならどこでも使える
(vectorの要素にしたりなど)。

.. code-block:: c++

  shared_ptr<T> p(new T());

shared_ptrのコンストラクタにポインタを渡すと、
そのポインタはshared_ptrによって管理されることになる。
auto_ptrなどと違い、一度shared_ptrに入れられると、
そのポインタはshared_ptrによる管理から外すことはできない。
これはshared_ptrが普通のコピーセマンティクスを持つことによる制限である。

非参照

.. code-block:: c++

  *p

ポインタの取得

.. code-block:: c++

  p.get()

ポインタ風のメンバへのアクセス

.. code-block:: c++

  p->hoge

NULLをアサインする。
持っていたポインタは必要に応じて解放される。

.. code-block:: c++

  p.reset()

ポインタ風にboolテストができる。

.. code-block:: c++

  if (p)

その他のメンバ関数
------------------

大体boost互換である。

注意
----

参照カウント方式なので、循環参照されていると解放できない。
現在のところ、weak_ptrなどは提供していないため、
回避するにはデストラクタで明示的に参照を外してやるなどの処理が必要である。

なぜこれが重要なのか
--------------------

リソースをその取得と同時にリソース管理オブジェクトに渡すリソース管理方法はRAIIと呼ばれる。
RAIIが重要な理由は次のような理由がある。

* リークしないという保証を得るため

手でdeleteするプログラムは、当然ながらdeleteを忘れるとメモリリークする。
shared_ptrを使っていれば、イージーミスによるメモリリークは起こり得ない。
何も考えずともメモリリークが起こらないことが保証されていることと、
気をつけなければいつでもメモリリークを起こしうるということは
かなり異なるので、deleteの付け忘れに気を付ければ良い、というものではない。

また、制御構造によっては、本質的にdeleteを正確に入れるのが困難な場合もある。
そういう場合、コードはgotoとif文が乱れ飛ぶ難解なものになりがちである。
shared_ptrで管理すれば、何も考える必要はない。

* 例外安全なコードをシンプルに書くため

例外がどこで飛ぶか分からない状況では(例えば、任意の型を取るテンプレート関数など)、
RAIIを用いずに例外安全なコードを書くのは大変困難である。
例外が起こりうる場所をすべて把握し、すべてのコードパスを考慮し、
正確にリソース開放の処理を入れるのは事実上不可能である。
RAIIであれば、何も考えずともデストラクタが宜しくやってくれる。
